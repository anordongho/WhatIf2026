import * as _sd_jwt_types from '@sd-jwt/types';
import { SDJWTConfig, DisclosureFrame } from '@sd-jwt/types';
import { SdJwtPayload, SDJwtInstance } from '@sd-jwt/core';

/**
 * Configuration for SD-JWT-VC
 */
type SDJWTVCConfig = SDJWTConfig & {
    statusListFetcher?: (uri: string) => Promise<string>;
    statusValidator?: (status: number) => Promise<void>;
};

interface SDJWTVCStatusReference {
    status_list: {
        idx: number;
        uri: string;
    };
}

interface SdJwtVcPayload extends SdJwtPayload {
    iss: string;
    nbf?: number;
    exp?: number;
    cnf?: unknown;
    vct: string;
    status?: SDJWTVCStatusReference;
    sub?: string;
    iat?: number;
}

declare class SDJwtVcInstance extends SDJwtInstance<SdJwtVcPayload> {
    /**
     * The type of the SD-JWT-VC set in the header.typ field.
     */
    protected type: string;
    protected userConfig: SDJWTVCConfig;
    constructor(userConfig?: SDJWTVCConfig);
    /**
     * Validates if the disclosureFrame contains any reserved fields. If so it will throw an error.
     * @param disclosureFrame
     */
    protected validateReservedFields(disclosureFrame: DisclosureFrame<SdJwtVcPayload>): void;
    /**
     * Fetches the status list from the uri with a timeout of 10 seconds.
     * @param uri The URI to fetch from.
     * @returns A promise that resolves to a compact JWT.
     */
    private statusListFetcher;
    /**
     * Validates the status, throws an error if the status is not 0.
     * @param status
     * @returns
     */
    private statusValidator;
    /**
     * Verifies the SD-JWT-VC.
     */
    verify(encodedSDJwt: string, requiredClaimKeys?: string[], requireKeyBindings?: boolean): Promise<{
        payload: SdJwtVcPayload;
        header: Record<string, unknown> | undefined;
        kb: {
            payload: _sd_jwt_types.kbPayload;
            header: _sd_jwt_types.kbHeader;
        } | undefined;
    }>;
}

export { type SDJWTVCConfig, type SDJWTVCStatusReference, SDJwtVcInstance, type SdJwtVcPayload };
