"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __reflectGet = Reflect.get;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  SDJwtVcInstance: () => SDJwtVcInstance
});
module.exports = __toCommonJS(src_exports);

// src/sd-jwt-vc-instance.ts
var import_core = require("@sd-jwt/core");
var import_utils = require("@sd-jwt/utils");
var import_jwt_status_list = require("@sd-jwt/jwt-status-list");
var SDJwtVcInstance = class _SDJwtVcInstance extends import_core.SDJwtInstance {
  constructor(userConfig) {
    super(userConfig);
    /**
     * The type of the SD-JWT-VC set in the header.typ field.
     */
    this.type = "vc+sd-jwt";
    this.userConfig = {};
    if (userConfig) {
      this.userConfig = userConfig;
    }
  }
  /**
   * Validates if the disclosureFrame contains any reserved fields. If so it will throw an error.
   * @param disclosureFrame
   */
  validateReservedFields(disclosureFrame) {
    if ((disclosureFrame == null ? void 0 : disclosureFrame._sd) && Array.isArray(disclosureFrame._sd) && disclosureFrame._sd.length > 0) {
      const reservedNames = ["iss", "nbf", "exp", "cnf", "vct", "status"];
      const reservedNamesInDisclosureFrame = disclosureFrame._sd.filter((key) => reservedNames.includes(key));
      if (reservedNamesInDisclosureFrame.length > 0) {
        throw new import_utils.SDJWTException("Cannot disclose protected field");
      }
    }
  }
  /**
   * Fetches the status list from the uri with a timeout of 10 seconds.
   * @param uri The URI to fetch from.
   * @returns A promise that resolves to a compact JWT.
   */
  statusListFetcher(uri) {
    return __async(this, null, function* () {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 1e4);
      try {
        const response = yield fetch(uri, {
          signal: controller.signal,
          headers: { Accept: "application/statuslist+jwt" }
        });
        if (!response.ok) {
          throw new Error(
            `Error fetching status list: ${response.status} ${yield response.text()}`
          );
        }
        if (response.headers.get("content-type") !== "application/statuslist+jwt") {
          throw new Error("Invalid content type");
        }
        return response.text();
      } finally {
        clearTimeout(timeoutId);
      }
    });
  }
  /**
   * Validates the status, throws an error if the status is not 0.
   * @param status
   * @returns
   */
  statusValidator(status) {
    return __async(this, null, function* () {
      if (status !== 0)
        throw new import_utils.SDJWTException("Status is not valid");
      return Promise.resolve();
    });
  }
  /**
   * Verifies the SD-JWT-VC.
   */
  verify(encodedSDJwt, requiredClaimKeys, requireKeyBindings) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      const result = yield __superGet(_SDJwtVcInstance.prototype, this, "verify").call(this, encodedSDJwt, requiredClaimKeys, requireKeyBindings).then((res) => {
        return {
          payload: res.payload,
          header: res.header,
          kb: res.kb
        };
      });
      if (result.payload.status) {
        if (result.payload.status.status_list) {
          const fetcher = (_a = this.userConfig.statusListFetcher) != null ? _a : this.statusListFetcher;
          const statusListJWT = yield fetcher(
            result.payload.status.status_list.uri
          );
          const slJWT = import_core.Jwt.fromEncode(statusListJWT);
          yield slJWT.verify(this.userConfig.verifier);
          if (((_b = slJWT.payload) == null ? void 0 : _b.exp) && slJWT.payload.exp < Date.now() / 1e3) {
            throw new import_utils.SDJWTException("Status list is expired");
          }
          const statusList = (0, import_jwt_status_list.getListFromStatusListJWT)(statusListJWT);
          const status = statusList.getStatus(
            result.payload.status.status_list.idx
          );
          const statusValidator = (_c = this.userConfig.statusValidator) != null ? _c : this.statusValidator;
          yield statusValidator(status);
        }
      }
      return result;
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SDJwtVcInstance
});
